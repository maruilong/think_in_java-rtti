忙着弄完了公司的事,可以闲几天了,把类型信息补完

对象的初始化操作被延迟到了对静态方法(构造器也是静态的) 或者非常数静态域的首次引用才执行
见com.shinian.typeinfo.demo.ClassInitializetion

初始化有效的实现了尽可能的惰性,使用.class去获得对象的引用的时候,不会引发初始化
但是 为了产生Class引用,Class.forName()立刻就进行了初始化

如果final static 是一个"编译期常量" 就想 finla static a =111; 一样
那么对这个属性的调用不会导出对象的初始化
但是如果一个final staic不是一个编译器常量的话 比如 : final a =new Random()
那么调用这个属性,就会强制的初始化该对象

如果一个staic 属性不是 final的 那么调用这个类 就会先衔接(为这个域分配储存空间)
和初始化(初始化该储存空间)

Class 引用表示的就是它所指向的对象的确切类型 而该对象就是Class类的一个对象
 
在java1.5中 Class<?> 要比Class优秀 虽然他们是等价的
而且Class也不会产生编译器警告信息 Class<?>的好处是他表示你并非是碰巧或者由于疏忽而使用了一个非具体的类因饮用
你就是选择了非具体的版本
换句话说就是 Class<?> 和 Class 没有任何区别

向Class引用添加泛型语法的原因仅仅是为了提供编译器类型检查,因此如果你操作有误
稍后立即就会发现这一点
Class<?> 和Class<NUmber>的区别 知道运行的时候才可能出现错误








